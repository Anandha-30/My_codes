import numpy as np
import matplotlib.pyplot as plt

# Define the differential equation
def f(x, y):
    return 4 * x**3 * y**2

# Runge-Kutta 4th order method
def runge_kutta(f, y0, x0, h, n):
    x = np.zeros(n)
    y = np.zeros(n)
    x[0] = x0
    y[0] = y0
    for i in range(1, n):
        k1 = h * f(x[i-1], y[i-1])
        k2 = h * f(x[i-1] + 0.5 * h, y[i-1] + 0.5 * k1)
        k3 = h * f(x[i-1] + 0.5 * h, y[i-1] + 0.5 * k2)
        k4 = h * f(x[i-1] + h, y[i-1] + k3)
        
        y[i] = y[i-1] + (1/6)*(k1 + 2*k2 + 2*k3 + k4)
        x[i] = x[i-1] + h
    return x, y

# Taking user input for the number of steps n
n = int(input("Enter the number of steps (n): "))

# Parameters
x0 = 0
y0 = 0.5
h = 1.0 / (n - 1)  # Step size based on the number of steps

# Solve the ODE
x, y = runge_kutta(f, y0, x0, h, n)

# Analytical solution for comparison: y(x) = 1 / (2 - x^4)
y_analytical = 1 / (2 - x**4)

# Plot the results
plt.plot(x, y, label='RK4 Solution', marker='o')
plt.plot(x, y_analytical, label='Analytical Solution', linestyle='--')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Runge-Kutta vs Analytical Solution')
plt.grid(True)
plt.show()

